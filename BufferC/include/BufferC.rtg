
regular tree grammar
  start Module
  productions
    ListStarOfExp2               -> ListPlusOfExp2
    ListStarOfExp2               -> <nil>()
    ListStarOfExp2               -> <conc>(ListStarOfExp2,ListStarOfExp2)
    ListPlusOfExp2               -> <conc>(ListStarOfExp2,ListPlusOfExp2)
    ListPlusOfExp2               -> <conc>(ListPlusOfExp2,ListStarOfExp2)
    ListPlusOfExp2               -> <conc>(ListPlusOfExp2,ListPlusOfExp2)
    ListPlusOfExp2               -> <cons>(Exp,ListStarOfExp2)
    ListStarOfFunctionParameter2 -> ListPlusOfFunctionParameter2
    ListStarOfFunctionParameter2 -> <nil>()
    ListStarOfFunctionParameter2 -> <conc>(ListStarOfFunctionParameter2,ListStarOfFunctionParameter2)
    ListPlusOfFunctionParameter2 -> <conc>(ListStarOfFunctionParameter2,ListPlusOfFunctionParameter2)
    ListPlusOfFunctionParameter2 -> <conc>(ListPlusOfFunctionParameter2,ListStarOfFunctionParameter2)
    ListPlusOfFunctionParameter2 -> <conc>(ListPlusOfFunctionParameter2,ListPlusOfFunctionParameter2)
    ListPlusOfFunctionParameter2 -> <cons>(FunctionParameter,ListStarOfFunctionParameter2)
    ListStarOfStm2               -> ListPlusOfStm2
    ListStarOfStm2               -> <nil>()
    ListStarOfStm2               -> <conc>(ListStarOfStm2,ListStarOfStm2)
    ListPlusOfStm2               -> <conc>(ListStarOfStm2,ListPlusOfStm2)
    ListPlusOfStm2               -> <conc>(ListPlusOfStm2,ListStarOfStm2)
    ListPlusOfStm2               -> <conc>(ListPlusOfStm2,ListPlusOfStm2)
    ListPlusOfStm2               -> <cons>(Stm,ListStarOfStm2)
    ListStarOfImport2            -> ListPlusOfImport2
    ListStarOfImport2            -> <nil>()
    ListStarOfImport2            -> <conc>(ListStarOfImport2,ListStarOfImport2)
    ListPlusOfImport2            -> <conc>(ListStarOfImport2,ListPlusOfImport2)
    ListPlusOfImport2            -> <conc>(ListPlusOfImport2,ListStarOfImport2)
    ListPlusOfImport2            -> <conc>(ListPlusOfImport2,ListPlusOfImport2)
    ListPlusOfImport2            -> <cons>(Import,ListStarOfImport2)
    ListStarOfModuleContent2     -> ListPlusOfModuleContent2
    ListStarOfModuleContent2     -> <nil>()
    ListStarOfModuleContent2     -> <conc>(ListStarOfModuleContent2,ListStarOfModuleContent2)
    ListPlusOfModuleContent2     -> <conc>(ListStarOfModuleContent2,ListPlusOfModuleContent2)
    ListPlusOfModuleContent2     -> <conc>(ListPlusOfModuleContent2,ListStarOfModuleContent2)
    ListPlusOfModuleContent2     -> <conc>(ListPlusOfModuleContent2,ListPlusOfModuleContent2)
    ListPlusOfModuleContent2     -> <cons>(ModuleContent,ListStarOfModuleContent2)
    OptModuleImports2            -> <some>(ModuleImports)
    OptModuleImports2            -> <none>()
    OptCommaExp2                 -> <some>(CommaExp)
    OptCommaExp2                 -> <none>()
    ListStarOfSlash2             -> <string>
    ListPlusOfSlash2             -> <string>
    ListStarOfCHAR2              -> <string>
    ListPlusOfCHAR2              -> <string>
    OptFLAGINT2                  -> <string>
    Identifier                   -> Fread()
    Identifier                   -> Fopen()
    Identifier                   -> PrintF()
    Identifier                   -> Print()
    Identifier                   -> Create()
    Identifier                   -> Length()
    Type                         -> FILE()
    Type                         -> Buffer()
    Type                         -> Int()
    FunProto                     -> COMPLETION-FunProto(CONTENTCOMPLETE)
    FunDef                       -> COMPLETION-FunDef(CONTENTCOMPLETE)
    FunctionParameter            -> COMPLETION-FunctionParameter(CONTENTCOMPLETE)
    FunProto                     -> FunProto(Type,Identifier,ListStarOfFunctionParameter2)
    FunDef                       -> FunDef(Type,Identifier,ListStarOfFunctionParameter2,ListStarOfStm2)
    FunctionParameter            -> Param(Type,Decl)
    Import                       -> COMPLETION-Import(CONTENTCOMPLETE)
    ModuleImports                -> COMPLETION-ModuleImports(CONTENTCOMPLETE)
    ModuleContent                -> COMPLETION-ModuleContent(CONTENTCOMPLETE)
    Module                       -> COMPLETION-Module(CONTENTCOMPLETE)
    Import                       -> Import(Identifier)
    ModuleImports                -> Imports(ListStarOfImport2)
    ModuleContent                -> FunProto
    ModuleContent                -> FunDef
    ModuleContent                -> Declaration
    Module                       -> Module(Identifier,OptModuleImports2,ListStarOfModuleContent2)
    Stm                          -> COMPLETION-Stm(CONTENTCOMPLETE)
    Block                        -> COMPLETION-Block(CONTENTCOMPLETE)
    Stm                          -> Exit(OptCommaExp2)
    Stm                          -> Return(OptCommaExp2)
    Stm                          -> ForDec(Declaration,OptCommaExp2,OptCommaExp2,Stm)
    Stm                          -> For(OptCommaExp2,OptCommaExp2,OptCommaExp2,Stm)
    Stm                          -> DoWhile(Stm,CommaExp)
    Stm                          -> While(CommaExp,Stm)
    Stm                          -> IfElse(CommaExp,Stm,Stm)
    Stm                          -> If(CommaExp,Stm)
    Stm                          -> Exp(CommaExp)
    Stm                          -> DeclStm(Declaration)
    Stm                          -> Block
    Block                        -> Block(ListStarOfStm2)
    Declaration                  -> COMPLETION-Declaration(CONTENTCOMPLETE)
    Decl                         -> COMPLETION-Decl(CONTENTCOMPLETE)
    Declaration                  -> DeclInit(Type,Decl,Exp)
    Declaration                  -> Decl(Type,Decl)
    Decl                         -> Decl(Identifier)
    EOF                          -> <string>
    NestedCommentRest            -> <string>
    NestedComment                -> <string>
    NestedCommentText            -> <string>
    Slash                        -> <string>
    Asterisk                     -> <string>
    CommaExp                     -> COMPLETION-CommaExp(CONTENTCOMPLETE)
    AssignOp                     -> COMPLETION-AssignOp(CONTENTCOMPLETE)
    AssignExp                    -> COMPLETION-AssignExp(CONTENTCOMPLETE)
    CommaExp                     -> AssignExp
    AssignOp                     -> Assign()
    AssignExp                    -> Assign(Exp,AssignOp,AssignExp)
    AssignExp                    -> Exp
    Exp                          -> Or(Exp,Exp)
    Exp                          -> And(Exp,Exp)
    Exp                          -> Inequal(Exp,Exp)
    Exp                          -> Equal(Exp,Exp)
    Exp                          -> GreaterThanEqual(Exp,Exp)
    Exp                          -> GreaterThan(Exp,Exp)
    Exp                          -> LessThanEqual(Exp,Exp)
    Exp                          -> LessThan(Exp,Exp)
    Exp                          -> Subtraction(Exp,Exp)
    Exp                          -> Addition(Exp,Exp)
    Exp                          -> Modulo(Exp,Exp)
    Exp                          -> Division(Exp,Exp)
    Exp                          -> Multiplication(Exp,Exp)
    Exp                          -> COMPLETION-Exp(CONTENTCOMPLETE)
    Exp                          -> Not(Exp)
    IndexExp                     -> Exp
    Exp                          -> DecrementPostfix(Exp)
    Exp                          -> IncrementPostfix(Exp)
    Exp                          -> Field(Exp,Identifier)
    Exp                          -> ArrayField(Exp,IndexExp)
    Exp                          -> FunctionCall(Identifier,ListStarOfExp2)
    Exp                          -> CommaExp(CommaExp)
    Exp                          -> Constant
    Exp                          -> Var(Identifier)
    Identifier                   -> COMPLETION-Identifier(CONTENTCOMPLETE)
    Identifier                   -> Identifier(ID)
    ID                           -> <string>
    Type                         -> COMPLETION-Type(CONTENTCOMPLETE)
    Type                         -> Char()
    Type                         -> Bool()
    Type                         -> Void()
    Constant                     -> String(CONSSTRING)
    Constant                     -> Char(CONSCHAR)
    Constant                     -> COMPLETION-Constant(CONTENTCOMPLETE)
    Constant                     -> Null()
    Constant                     -> False()
    Constant                     -> True()
    Constant                     -> Decimal(CONS)
    Keyword                      -> <string>
    CONSSTRING                   -> <string>
    CONSCHAR                     -> <string>
    CHAR                         -> <string>
    FLAGINT                      -> <string>
    CONS                         -> <string>
