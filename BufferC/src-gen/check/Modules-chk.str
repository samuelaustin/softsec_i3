module check/Modules-chk

imports
  libstratego-gpp
  runtime/tmpl/pp
  libstratego-sglr
  signatures/Modules-sig


imports
  signatures/Identifiers-sig


imports
  signatures/Constants-sig


imports
  signatures/Expressions-sig


imports
  signatures/Types-sig


imports
  signatures/Statements-sig


imports
  check/Identifiers-chk


imports
  check/Constants-chk


imports
  check/Expressions-chk


imports
  check/Types-chk


imports
  check/Statements-chk


strategies
  check-example =
    check-Module

  check-example =
    check-ModuleContent

  check-example =
    check-ModuleImports

  check-example =
    check-Import

  check-Module :
    Module(t1__, t2__, t3__) -> <id>
    with <(check-Identifier <+ error-Identifier)> t1__
    with <map(check-ModuleContent <+ error-ModuleContent)> t3__

  is-Module-with-constructor =
    ?Module(_, _, _)

  check-ModuleContent :
    t1__ -> <id>
    where not(is-ModuleContent-with-constructor)
    where <(check-Declaration <+ error-Declaration)> t1__

  check-ModuleContent :
    t1__ -> <id>
    where not(is-ModuleContent-with-constructor)
    where <(check-FunDef <+ error-FunDef)> t1__

  check-ModuleContent :
    t1__ -> <id>
    where not(is-ModuleContent-with-constructor)
    where <(check-FunProto <+ error-FunProto)> t1__

  check-ModuleImports :
    Imports(t1__) -> <id>
    with <map(check-Import <+ error-Import)> t1__

  is-ModuleImports-with-constructor =
    ?Imports(_)

  check-Import :
    Import(t1__) -> <id>
    with <(check-Identifier <+ error-Identifier)> t1__

  is-Import-with-constructor =
    ?Import(_)

  is-Module-with-constructor =
    fail

  is-ModuleContent-with-constructor =
    fail

  is-ModuleImports-with-constructor =
    fail

  is-Import-with-constructor =
    fail

  check-Module :
    amb([h|hs]) -> <check-Module> h

  check-ModuleContent :
    amb([h|hs]) -> <check-ModuleContent> h

  check-ModuleImports :
    amb([h|hs]) -> <check-ModuleImports> h

  check-Import :
    amb([h|hs]) -> <check-Import> h

  error-Module =
    debug(!"Unexpected constructor. Expected constructor from sort Module instead. ")

  error-ModuleContent =
    debug(!"Unexpected constructor. Expected constructor from sort ModuleContent instead. ")

  error-ModuleImports =
    debug(!"Unexpected constructor. Expected constructor from sort ModuleImports instead. ")

  error-Import =
    debug(!"Unexpected constructor. Expected constructor from sort Import instead. ")


strategies
  check-example =
    check-FunctionParameter

  check-example =
    check-FunDef

  check-example =
    check-FunProto

  check-FunctionParameter :
    Param(t1__, t2__) -> <id>
    with <(check-Type <+ error-Type)> t1__
    with <(check-Decl <+ error-Decl)> t2__

  is-FunctionParameter-with-constructor =
    ?Param(_, _)

  check-FunDef :
    FunDef(t1__, t2__, t3__, t4__) -> <id>
    with <(check-Type <+ error-Type)> t1__
    with <(check-Identifier <+ error-Identifier)> t2__
    with <map(check-FunctionParameter <+ error-FunctionParameter)> t3__
    with <map(check-Stm <+ error-Stm)> t4__

  is-FunDef-with-constructor =
    ?FunDef(_, _, _, _)

  check-FunProto :
    FunProto(t1__, t2__, t3__) -> <id>
    with <(check-Type <+ error-Type)> t1__
    with <(check-Identifier <+ error-Identifier)> t2__
    with <map(check-FunctionParameter <+ error-FunctionParameter)> t3__

  is-FunProto-with-constructor =
    ?FunProto(_, _, _)

  is-FunctionParameter-with-constructor =
    fail

  is-FunDef-with-constructor =
    fail

  is-FunProto-with-constructor =
    fail

  check-FunctionParameter :
    amb([h|hs]) -> <check-FunctionParameter> h

  check-FunDef :
    amb([h|hs]) -> <check-FunDef> h

  check-FunProto :
    amb([h|hs]) -> <check-FunProto> h

  error-FunctionParameter =
    debug(!"Unexpected constructor. Expected constructor from sort FunctionParameter instead. ")

  error-FunDef =
    debug(!"Unexpected constructor. Expected constructor from sort FunDef instead. ")

  error-FunProto =
    debug(!"Unexpected constructor. Expected constructor from sort FunProto instead. ")