module check/Statements-chk

imports
  libstratego-gpp
  runtime/tmpl/pp
  libstratego-sglr
  signatures/Statements-sig


imports
  signatures/Identifiers-sig


imports
  signatures/Expressions-sig


imports
  signatures/Types-sig


imports
  check/Identifiers-chk


imports
  check/Expressions-chk


imports
  check/Types-chk


strategies
  check-example =
    check-Decl

  check-example =
    check-Declaration

  check-Decl :
    Decl(t1__) -> <id>
    with <(check-Identifier <+ error-Identifier)> t1__

  is-Decl-with-constructor =
    ?Decl(_)

  check-Declaration :
    Decl(t1__, t2__) -> <id>
    with <(check-Type <+ error-Type)> t1__
    with <(check-Decl <+ error-Decl)> t2__

  is-Declaration-with-constructor =
    ?Decl(_, _)

  check-Declaration :
    DeclInit(t1__, t2__, t3__) -> <id>
    with <(check-Type <+ error-Type)> t1__
    with <(check-Decl <+ error-Decl)> t2__
    with <(check-Exp <+ error-Exp)> t3__

  is-Declaration-with-constructor =
    ?DeclInit(_, _, _)

  is-Decl-with-constructor =
    fail

  is-Declaration-with-constructor =
    fail

  check-Decl :
    amb([h|hs]) -> <check-Decl> h

  check-Declaration :
    amb([h|hs]) -> <check-Declaration> h

  error-Decl =
    debug(!"Unexpected constructor. Expected constructor from sort Decl instead. ")

  error-Declaration =
    debug(!"Unexpected constructor. Expected constructor from sort Declaration instead. ")


strategies
  check-example =
    check-Block

  check-example =
    check-Stm

  check-Block :
    Block(t1__) -> <id>
    with <map(check-Stm <+ error-Stm)> t1__

  is-Block-with-constructor =
    ?Block(_)

  check-Stm :
    t1__ -> <id>
    where not(is-Stm-with-constructor)
    where <(check-Block <+ error-Block)> t1__

  check-Stm :
    DeclStm(t1__) -> <id>
    with <(check-Declaration <+ error-Declaration)> t1__

  is-Stm-with-constructor =
    ?DeclStm(_)

  check-Stm :
    Exp(t1__) -> <id>
    with <(check-CommaExp <+ error-CommaExp)> t1__

  is-Stm-with-constructor =
    ?Exp(_)

  check-Stm :
    If(t1__, t2__) -> <id>
    with <(check-CommaExp <+ error-CommaExp)> t1__
    with <(check-Stm <+ error-Stm)> t2__

  is-Stm-with-constructor =
    ?If(_, _)

  check-Stm :
    IfElse(t1__, t2__, t3__) -> <id>
    with <(check-CommaExp <+ error-CommaExp)> t1__
    with <(check-Stm <+ error-Stm)> t2__
    with <(check-Stm <+ error-Stm)> t3__

  is-Stm-with-constructor =
    ?IfElse(_, _, _)

  check-Stm :
    While(t1__, t2__) -> <id>
    with <(check-CommaExp <+ error-CommaExp)> t1__
    with <(check-Stm <+ error-Stm)> t2__

  is-Stm-with-constructor =
    ?While(_, _)

  check-Stm :
    DoWhile(t1__, t2__) -> <id>
    with <(check-Stm <+ error-Stm)> t1__
    with <(check-CommaExp <+ error-CommaExp)> t2__

  is-Stm-with-constructor =
    ?DoWhile(_, _)

  check-Stm :
    For(t1__, t2__, t3__, t4__) -> <id>
    with <(check-Stm <+ error-Stm)> t4__

  is-Stm-with-constructor =
    ?For(_, _, _, _)

  check-Stm :
    ForDec(t1__, t2__, t3__, t4__) -> <id>
    with <(check-Declaration <+ error-Declaration)> t1__
    with <(check-Stm <+ error-Stm)> t4__

  is-Stm-with-constructor =
    ?ForDec(_, _, _, _)

  check-Stm :
    Return(t1__) -> <id>

  is-Stm-with-constructor =
    ?Return(_)

  check-Stm :
    Exit(t1__) -> <id>

  is-Stm-with-constructor =
    ?Exit(_)

  is-Block-with-constructor =
    fail

  is-Stm-with-constructor =
    fail

  check-Block :
    amb([h|hs]) -> <check-Block> h

  check-Stm :
    amb([h|hs]) -> <check-Stm> h

  error-Block =
    debug(!"Unexpected constructor. Expected constructor from sort Block instead. ")

  error-Stm =
    debug(!"Unexpected constructor. Expected constructor from sort Stm instead. ")