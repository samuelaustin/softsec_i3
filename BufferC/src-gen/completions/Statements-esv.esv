
module completions/Statements-esv

imports
  completions/Identifiers-esv
  completions/Expressions-esv
  completions/Types-esv

completions
  completion template Declaration : "Type Decl" =
    <Type:Type> " " <Decl:Decl>  
  completion template Declaration : "Type Decl = Exp" =
    <Type:Type> " " <Decl:Decl> " = " <Exp:Exp>  

completions
  completion template Block : "{ }" =
    "{\n\t" (cursor) "\n}" (blank)                           
  completion template Stm : "Declaration;" =
    <Declaration:Declaration> ";"                     
  completion template Stm : "CommaExp;" =
    <CommaExp:CommaExp> ";"                              
  completion template Stm : "if ( CommaExp ) Stm" =
    "if ( " <CommaExp:CommaExp> " )\n\t" <Stm:Stm> (blank)  
  completion template Stm : "if ( CommaExp ) Stm else Stm" =
    "if ( " <CommaExp:CommaExp> " )\n\t" <Stm:Stm> "\nelse\n\t" <Stm:Stm> (blank)  
  completion template Stm : "while ( CommaExp ) Stm" =
    "while ( " <CommaExp:CommaExp> " )\n\t" <Stm:Stm> (blank)  
  completion template Stm : "do Stm while ( CommaExp )" =
    "do\n\t" <Stm:Stm> "\nwhile ( " <CommaExp:CommaExp> " )" (blank)  
  completion template Stm : "for(; ; ) Stm" =
    "for(" <:CommaExp> "; " <:CommaExp> "; " <:CommaExp> ")\n\t" <Stm:Stm> (blank)  
  completion template Stm : "for(Declaration; ; ) Stm" =
    "for(" <Declaration:Declaration> "; " <:CommaExp> " ; " <:CommaExp> ")\n\t" <Stm:Stm> (blank)  
  completion template Stm : "return ;" =
    "return " <:CommaExp> " ;"                            
  completion template Stm : "exit ;" =
    "exit " <:CommaExp> " ;"                                