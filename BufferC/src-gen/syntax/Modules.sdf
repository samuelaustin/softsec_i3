module Modules
imports Identifiers

imports Constants

imports Expressions

imports Types

imports Statements

exports
  context-free syntax
    "module" Identifier ModuleImports? "{" ModuleContent* "}" -> Module        {cons("Module")}
    Declaration                                               -> ModuleContent 
    FunDef                                                    -> ModuleContent 
    FunProto                                                  -> ModuleContent 
    "imports" {Import ","}*                                   -> ModuleImports {cons("Imports")}
    Identifier                                                -> Import        {cons("Import")}

  context-free syntax
    CONTENTCOMPLETE -> Module        {cons("COMPLETION-Module")}
    CONTENTCOMPLETE -> ModuleContent {cons("COMPLETION-ModuleContent")}
    CONTENTCOMPLETE -> ModuleImports {cons("COMPLETION-ModuleImports")}
    CONTENTCOMPLETE -> Import        {cons("COMPLETION-Import")}

  context-free syntax
    Type Decl                                                     -> FunctionParameter {cons("Param")}
    Type Identifier "(" {FunctionParameter ","}* ")" "{" Stm* "}" -> FunDef            {cons("FunDef")}
    Type Identifier "(" {FunctionParameter ","}* ")" ";"          -> FunProto          {cons("FunProto")}

  context-free syntax
    CONTENTCOMPLETE -> FunctionParameter {cons("COMPLETION-FunctionParameter")}
    CONTENTCOMPLETE -> FunDef            {cons("COMPLETION-FunDef")}
    CONTENTCOMPLETE -> FunProto          {cons("COMPLETION-FunProto")}