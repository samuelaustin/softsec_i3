module Statements
imports Identifiers

imports Expressions

imports Types

exports
  context-free syntax
    Identifier        -> Decl        {cons("Decl")}
    Type Decl         -> Declaration {cons("Decl")}
    Type Decl "=" Exp -> Declaration {cons("DeclInit")}

  context-free syntax
    CONTENTCOMPLETE -> Decl        {cons("COMPLETION-Decl")}
    CONTENTCOMPLETE -> Declaration {cons("COMPLETION-Declaration")}

  context-free syntax
    "{" Stm* "}"                                              -> Block {cons("Block")}
    Block                                                     -> Stm   
    Declaration ";"                                           -> Stm   {cons("DeclStm")}
    CommaExp ";"                                              -> Stm   {cons("Exp")}
    "if" "(" CommaExp ")" Stm                                 -> Stm   {cons("If")}
    "if" "(" CommaExp ")" Stm "else" Stm                      -> Stm   {cons("IfElse")}
    "while" "(" CommaExp ")" Stm                              -> Stm   {cons("While")}
    "do" Stm "while" "(" CommaExp ")"                         -> Stm   {cons("DoWhile")}
    "for" "(" CommaExp? ";" CommaExp? ";" CommaExp? ")" Stm   -> Stm   {cons("For")}
    "for" "(" Declaration ";" CommaExp? ";" CommaExp? ")" Stm -> Stm   {cons("ForDec")}
    "return" CommaExp? ";"                                    -> Stm   {cons("Return")}
    "exit" CommaExp? ";"                                      -> Stm   {cons("Exit")}

  context-free syntax
    CONTENTCOMPLETE -> Block {cons("COMPLETION-Block")}
    CONTENTCOMPLETE -> Stm   {cons("COMPLETION-Stm")}