module pp/Modules-pp

imports
  libstratego-gpp
  runtime/tmpl/pp
  libstratego-sglr
  signatures/Modules-sig


imports
  signatures/Identifiers-sig


imports
  signatures/Constants-sig


imports
  signatures/Expressions-sig


imports
  signatures/Types-sig


imports
  signatures/Statements-sig


imports
  pp/Identifiers-pp


imports
  pp/Constants-pp


imports
  pp/Expressions-pp


imports
  pp/Types-pp


imports
  pp/Statements-pp


strategies
  prettyprint-example =
    prettyprint-Module

  prettyprint-example =
    prettyprint-ModuleContent

  prettyprint-example =
    prettyprint-ModuleImports

  prettyprint-example =
    prettyprint-Import

  prettyprint-Module :
    Module(t1__, t2__, t3__) -> [ H(
                                    [SOpt(HS(), "0")]
                                  , [ S("module ")
                                    , t1__'
                                    , S(" ")
                                    , t2__'
                                    , S(" {")
                                    ]
                                  )
                                , t3__'
                                , H(
                                    [SOpt(HS(), "0")]
                                  , [S("}")]
                                  )
                                ]
    with t1__' := <pp-one-Z(prettyprint-Identifier)> t1__
    with t2__' := <pp-option(pp-one-Z(prettyprint-ModuleImports))> t2__
    with t3__' := <pp-indent(|"2")> [<pp-V-list(prettyprint-ModuleContent)> t3__]

  is-Module =
    ?Module(_, _, _)

  prettyprint-ModuleContent :
    t1__ -> [ H(
                [SOpt(HS(), "0")]
              , [t1__']
              )
            ]
    where not(is-ModuleContent)
    where t1__' := <pp-one-Z(prettyprint-Declaration)> t1__

  prettyprint-ModuleContent :
    t1__ -> [ H(
                [SOpt(HS(), "0")]
              , [t1__']
              )
            ]
    where not(is-ModuleContent)
    where t1__' := <pp-one-Z(prettyprint-FunDef)> t1__

  prettyprint-ModuleContent :
    t1__ -> [ H(
                [SOpt(HS(), "0")]
              , [t1__']
              )
            ]
    where not(is-ModuleContent)
    where t1__' := <pp-one-Z(prettyprint-FunProto)> t1__

  prettyprint-ModuleImports :
    Imports(t1__) -> [ H(
                         [SOpt(HS(), "0")]
                       , [S("imports "), t1__']
                       )
                     ]
    with t1__' := <pp-H-list(prettyprint-Import|",")> t1__

  is-ModuleImports =
    ?Imports(_)

  prettyprint-Import :
    Import(t1__) -> [ H(
                        [SOpt(HS(), "0")]
                      , [t1__']
                      )
                    ]
    with t1__' := <pp-one-Z(prettyprint-Identifier)> t1__

  is-Import =
    ?Import(_)

  is-Module =
    fail

  is-ModuleContent =
    fail

  is-ModuleImports =
    fail

  is-Import =
    fail

  prettyprint-Module :
    amb([h|hs]) -> <prettyprint-Module> h

  prettyprint-ModuleContent :
    amb([h|hs]) -> <prettyprint-ModuleContent> h

  prettyprint-ModuleImports :
    amb([h|hs]) -> <prettyprint-ModuleImports> h

  prettyprint-Import :
    amb([h|hs]) -> <prettyprint-Import> h


strategies
  prettyprint-example =
    prettyprint-FunctionParameter

  prettyprint-example =
    prettyprint-FunDef

  prettyprint-example =
    prettyprint-FunProto

  prettyprint-FunctionParameter :
    Param(t1__, t2__) -> [ H(
                             [SOpt(HS(), "0")]
                           , [t1__', S(" "), t2__']
                           )
                         ]
    with t1__' := <pp-one-Z(prettyprint-Type)> t1__
    with t2__' := <pp-one-Z(prettyprint-Decl)> t2__

  is-FunctionParameter =
    ?Param(_, _)

  prettyprint-FunDef :
    FunDef(t1__, t2__, t3__, t4__) -> [ H(
                                          [SOpt(HS(), "0")]
                                        , [ t1__'
                                          , S(" ")
                                          , t2__'
                                          , S(" (")
                                          , t3__'
                                          , S(") {")
                                          ]
                                        )
                                      , t4__'
                                      , H(
                                          [SOpt(HS(), "0")]
                                        , [S("}")]
                                        )
                                      ]
    with t1__' := <pp-one-Z(prettyprint-Type)> t1__
    with t2__' := <pp-one-Z(prettyprint-Identifier)> t2__
    with t3__' := <pp-H-list(prettyprint-FunctionParameter|",")> t3__
    with t4__' := <pp-indent(|"2")> [<pp-H-list(prettyprint-Stm)> t4__]

  is-FunDef =
    ?FunDef(_, _, _, _)

  prettyprint-FunProto :
    FunProto(t1__, t2__, t3__) -> [ H(
                                      [SOpt(HS(), "0")]
                                    , [ t1__'
                                      , S(" ")
                                      , t2__'
                                      , S(" (")
                                      , t3__'
                                      , S(");")
                                      ]
                                    )
                                  ]
    with t1__' := <pp-one-Z(prettyprint-Type)> t1__
    with t2__' := <pp-one-Z(prettyprint-Identifier)> t2__
    with t3__' := <pp-H-list(prettyprint-FunctionParameter|",")> t3__

  is-FunProto =
    ?FunProto(_, _, _)

  is-FunctionParameter =
    fail

  is-FunDef =
    fail

  is-FunProto =
    fail

  prettyprint-FunctionParameter :
    amb([h|hs]) -> <prettyprint-FunctionParameter> h

  prettyprint-FunDef :
    amb([h|hs]) -> <prettyprint-FunDef> h

  prettyprint-FunProto :
    amb([h|hs]) -> <prettyprint-FunProto> h