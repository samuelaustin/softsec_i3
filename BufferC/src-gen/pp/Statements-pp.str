module pp/Statements-pp

imports
  libstratego-gpp
  runtime/tmpl/pp
  libstratego-sglr
  signatures/Statements-sig


imports
  signatures/Identifiers-sig


imports
  signatures/Expressions-sig


imports
  signatures/Types-sig


imports
  pp/Identifiers-pp


imports
  pp/Expressions-pp


imports
  pp/Types-pp


strategies
  prettyprint-example =
    prettyprint-Decl

  prettyprint-example =
    prettyprint-Declaration

  prettyprint-Decl :
    Decl(t1__) -> [ H(
                      [SOpt(HS(), "0")]
                    , [t1__']
                    )
                  ]
    with t1__' := <pp-one-Z(prettyprint-Identifier)> t1__

  is-Decl =
    ?Decl(_)

  prettyprint-Declaration :
    Decl(t1__, t2__) -> [ H(
                            [SOpt(HS(), "0")]
                          , [t1__', S(" "), t2__']
                          )
                        ]
    with t1__' := <pp-one-Z(prettyprint-Type)> t1__
    with t2__' := <pp-one-Z(prettyprint-Decl)> t2__

  is-Declaration =
    ?Decl(_, _)

  prettyprint-Declaration :
    DeclInit(t1__, t2__, t3__) -> [ H(
                                      [SOpt(HS(), "0")]
                                    , [ t1__'
                                      , S(" ")
                                      , t2__'
                                      , S(" = ")
                                      , t3__'
                                      ]
                                    )
                                  ]
    with t1__' := <pp-one-Z(prettyprint-Type)> t1__
    with t2__' := <pp-one-Z(prettyprint-Decl)> t2__
    with t3__' := <pp-one-Z(prettyprint-Exp)> t3__

  is-Declaration =
    ?DeclInit(_, _, _)

  is-Decl =
    fail

  is-Declaration =
    fail

  prettyprint-Decl :
    amb([h|hs]) -> <prettyprint-Decl> h

  prettyprint-Declaration :
    amb([h|hs]) -> <prettyprint-Declaration> h


strategies
  prettyprint-example =
    prettyprint-Block

  prettyprint-example =
    prettyprint-Stm

  prettyprint-Block :
    Block(t1__) -> [ H(
                       [SOpt(HS(), "0")]
                     , [S("{")]
                     )
                   , t1__'
                   , H(
                       [SOpt(HS(), "0")]
                     , [S("}")]
                     )
                   ]
    with t1__' := <pp-indent(|"2")> [<pp-H-list(prettyprint-Stm)> t1__]

  is-Block =
    ?Block(_)

  prettyprint-Stm :
    t1__ -> [ H(
                [SOpt(HS(), "0")]
              , [t1__']
              )
            ]
    where not(is-Stm)
    where t1__' := <pp-one-Z(prettyprint-Block)> t1__

  prettyprint-Stm :
    DeclStm(t1__) -> [ H(
                         [SOpt(HS(), "0")]
                       , [t1__', S(";")]
                       )
                     ]
    with t1__' := <pp-one-Z(prettyprint-Declaration)> t1__

  is-Stm =
    ?DeclStm(_)

  prettyprint-Stm :
    Exp(t1__) -> [ H(
                     [SOpt(HS(), "0")]
                   , [t1__', S(";")]
                   )
                 ]
    with t1__' := <pp-one-Z(prettyprint-CommaExp)> t1__

  is-Stm =
    ?Exp(_)

  prettyprint-Stm :
    If(t1__, t2__) -> [ H(
                          [SOpt(HS(), "0")]
                        , [ S("if ( ")
                          , t1__'
                          , S(" )")
                          ]
                        )
                      , t2__'
                      ]
    with t1__' := <pp-one-Z(prettyprint-CommaExp)> t1__
    with t2__' := <pp-indent(|"2")> [<pp-one-Z(prettyprint-Stm)> t2__]

  is-Stm =
    ?If(_, _)

  prettyprint-Stm :
    IfElse(t1__, t2__, t3__) -> [ H(
                                    [SOpt(HS(), "0")]
                                  , [ S("if ( ")
                                    , t1__'
                                    , S(" )")
                                    ]
                                  )
                                , t2__'
                                , H(
                                    [SOpt(HS(), "0")]
                                  , [S("else")]
                                  )
                                , t3__'
                                ]
    with t1__' := <pp-one-Z(prettyprint-CommaExp)> t1__
    with t2__' := <pp-indent(|"2")> [<pp-one-Z(prettyprint-Stm)> t2__]
    with t3__' := <pp-indent(|"2")> [<pp-one-Z(prettyprint-Stm)> t3__]

  is-Stm =
    ?IfElse(_, _, _)

  prettyprint-Stm :
    While(t1__, t2__) -> [ H(
                             [SOpt(HS(), "0")]
                           , [ S("while ( ")
                             , t1__'
                             , S(" )")
                             ]
                           )
                         , t2__'
                         ]
    with t1__' := <pp-one-Z(prettyprint-CommaExp)> t1__
    with t2__' := <pp-indent(|"2")> [<pp-one-Z(prettyprint-Stm)> t2__]

  is-Stm =
    ?While(_, _)

  prettyprint-Stm :
    DoWhile(t1__, t2__) -> [ H(
                               [SOpt(HS(), "0")]
                             , [S("do")]
                             )
                           , t1__'
                           , H(
                               [SOpt(HS(), "0")]
                             , [ S("while ( ")
                               , t2__'
                               , S(" )")
                               ]
                             )
                           ]
    with t1__' := <pp-indent(|"2")> [<pp-one-Z(prettyprint-Stm)> t1__]
    with t2__' := <pp-one-Z(prettyprint-CommaExp)> t2__

  is-Stm =
    ?DoWhile(_, _)

  prettyprint-Stm :
    For(t1__, t2__, t3__, t4__) -> [ H(
                                       [SOpt(HS(), "0")]
                                     , [ S("for(")
                                       , t1__'
                                       , S("; ")
                                       , t2__'
                                       , S("; ")
                                       , t3__'
                                       , S(")")
                                       ]
                                     )
                                   , t4__'
                                   ]
    with t1__' := <pp-option(pp-one-Z(prettyprint-CommaExp))> t1__
    with t2__' := <pp-option(pp-one-Z(prettyprint-CommaExp))> t2__
    with t3__' := <pp-option(pp-one-Z(prettyprint-CommaExp))> t3__
    with t4__' := <pp-indent(|"2")> [<pp-one-Z(prettyprint-Stm)> t4__]

  is-Stm =
    ?For(_, _, _, _)

  prettyprint-Stm :
    ForDec(t1__, t2__, t3__, t4__) -> [ H(
                                          [SOpt(HS(), "0")]
                                        , [ S("for(")
                                          , t1__'
                                          , S("; ")
                                          , t2__'
                                          , S(" ; ")
                                          , t3__'
                                          , S(")")
                                          ]
                                        )
                                      , t4__'
                                      ]
    with t1__' := <pp-one-Z(prettyprint-Declaration)> t1__
    with t2__' := <pp-option(pp-one-Z(prettyprint-CommaExp))> t2__
    with t3__' := <pp-option(pp-one-Z(prettyprint-CommaExp))> t3__
    with t4__' := <pp-indent(|"2")> [<pp-one-Z(prettyprint-Stm)> t4__]

  is-Stm =
    ?ForDec(_, _, _, _)

  prettyprint-Stm :
    Return(t1__) -> [ H(
                        [SOpt(HS(), "0")]
                      , [ S("return ")
                        , t1__'
                        , S(" ;")
                        ]
                      )
                    ]
    with t1__' := <pp-option(pp-one-Z(prettyprint-CommaExp))> t1__

  is-Stm =
    ?Return(_)

  prettyprint-Stm :
    Exit(t1__) -> [ H(
                      [SOpt(HS(), "0")]
                    , [ S("exit ")
                      , t1__'
                      , S(" ;")
                      ]
                    )
                  ]
    with t1__' := <pp-option(pp-one-Z(prettyprint-CommaExp))> t1__

  is-Stm =
    ?Exit(_)

  is-Block =
    fail

  is-Stm =
    fail

  prettyprint-Block :
    amb([h|hs]) -> <prettyprint-Block> h

  prettyprint-Stm :
    amb([h|hs]) -> <prettyprint-Stm> h