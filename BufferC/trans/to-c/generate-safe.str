module generate-safe

imports include/BufferC
imports to-c/generate
imports to-c/annotate-returns
imports runtime/types/-
imports runtime/editor/annotations
imports runtime/task/- 
imports signatures/- 

imports runtime/types/query
  
rules // buffer operations

  // Write the target templates for the following rules
  // in order to implement the basic buffer primitives.
  // See generate.str for inspiration.
	
	typeof :
    e{t*} -> t
    where <fetch-elem(Buffer())> t* => t
	
	gen-c-special :
		Buffer() -> $[buffer *]
//		
	gen-c-special :
		Null() -> $[NULL]
//  		
	gen-c-special :
		String(str) -> $[alloc_buf_string([<string-length>str]-2, [str])]
		where i := <string-length>str
//			
	gen-c-special :
		FunctionCall(Create(), es) -> $[alloc_buf([<genc>es])]
//
	gen-c-special :
		Field(e, Length()) -> $[[<genc>e]->bufsize]
//			
	gen-c-special :
		Assign(ArrayField(e1, e_idx), Assign(), e2) -> ${assign_char({<genc>e1}, {<genc>e_idx}, {<genc>e2})}
//		
	gen-c-special :
		ArrayField(e1, e2) -> ${get_char_at_index({<genc>e1}, {<genc>e2})}
//			
	gen-c-special :
		FunctionCall(Print(), es) -> $[printf([<genc>es]->ptr)]

//			
	custom-check(|ctx, name, error): 
	e -> <id> 
	where 
	t := <type-task(|ctx)> e ; 
	check := <new-task(|ctx)> Rewrite(name, t) ; 
	<task-create-error-on-failure(|ctx, check, error)> e 
	
	
	nabl-constraint(|ctx) : 
	FunctionCall(PrintF(), [e | es]) -> <fail> 
	where 
	<custom-check(|ctx,"buf-check","buffer expected as first argument to printf")> e ; 
	<map(custom-check(|ctx,"var-arg-check","buffer expected"))> es 
	
	task-rewrite : ("buf-check", type) -> <?Buffer()> type 
	task-rewrite : ("var-arg-check", type) -> <?Buffer()> type
	
	gen-c-special :
		FunctionCall(PrintF(), es) -> $[safe_format_string([<genc>es])->ptr]

//			
	gen-c-special :
		FunctionCall(Fopen(), es) -> $[fopen([<genc>es])]
//			
	gen-c-special :
		FunctionCall(Fread(), es) -> $[safe_file_read([<genc>es])]

rules // main function

  // the main function takes 
	
	gen-c-header-special :
  		FunDef(t, Identifier("main"), params, stms) -> $[[<genc>t] main([<mapsep(genc|", ")>params]);]
//    
	gen-c-special :
  		FunDef(t, Identifier("main"), params, stms) -> $[
      [<genc>t] main([<mapsep(genc|", ")>params]) {
        [<gen-c-stms>stms]
  		}
    ]
    
rules // reference counting
				
	// write more gen-c-special rules to instrument reference counting code
	
	// a typical to change is assignment
	
	// Assignment of a buffer to a buffer
	gen-c-special :
		Assign(e1, Assign(), e2) -> $[deref_buf([<genc>e1]); 
									[<genc>e1] = [<genc>e2];
									ref_buf([<genc>e2])]
		where
			<get-type> e1 => Buffer();
			<get-type> e2 => Buffer();
			not(!e2 => FunctionCall(Identifier(i), es));
			not(!e2 => FunctionCall(Create(), es));
			not(!e2 => String(str))
	
	// Assignment of a buffer from the return of a function
	gen-c-special :
		Assign(e1, Assign(), e2) -> $[deref_buf([<genc>e1]); 
									[<genc>e1] = [<genc>e2];
									ref_buf([<genc>e1])]
		where
			<get-type> e1 => Buffer();
			!e2 => FunctionCall(Identifier(i), es);
			not(!e2 => FunctionCall(Create(), es));
			not(!e2 => String(str))
	
	// Assignemnt of a buffer from an allocation (creation of new buffer)
	gen-c-special :
		Assign(e1, Assign(), e2) -> $[deref_buf([<genc>e1]); 
									[<genc>e1] = [<genc>e2]]
		where
			<get-type> e1 => Buffer();
			!e2 => FunctionCall(Create(), es)
	
	gen-c-special : 
		Return("final") -> $[]
		
  // examples/refcount.bc contains a variety of scenarios
  
  
